/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StatisticsRouteImport } from './routes/statistics'
import { Route as SourcesRouteImport } from './routes/sources'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsSettingsIdRouteImport } from './routes/settings.$settingsId'

const StatisticsRoute = StatisticsRouteImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => rootRouteImport,
} as any)
const SourcesRoute = SourcesRouteImport.update({
  id: '/sources',
  path: '/sources',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsSettingsIdRoute = SettingsSettingsIdRouteImport.update({
  id: '/$settingsId',
  path: '/$settingsId',
  getParentRoute: () => SettingsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/sources': typeof SourcesRoute
  '/statistics': typeof StatisticsRoute
  '/settings/$settingsId': typeof SettingsSettingsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/sources': typeof SourcesRoute
  '/statistics': typeof StatisticsRoute
  '/settings/$settingsId': typeof SettingsSettingsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/settings': typeof SettingsRouteWithChildren
  '/sources': typeof SourcesRoute
  '/statistics': typeof StatisticsRoute
  '/settings/$settingsId': typeof SettingsSettingsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/sources'
    | '/statistics'
    | '/settings/$settingsId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/sources' | '/statistics' | '/settings/$settingsId'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/sources'
    | '/statistics'
    | '/settings/$settingsId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  SourcesRoute: typeof SourcesRoute
  StatisticsRoute: typeof StatisticsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/statistics': {
      id: '/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sources': {
      id: '/sources'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof SourcesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/$settingsId': {
      id: '/settings/$settingsId'
      path: '/$settingsId'
      fullPath: '/settings/$settingsId'
      preLoaderRoute: typeof SettingsSettingsIdRouteImport
      parentRoute: typeof SettingsRoute
    }
  }
}

interface SettingsRouteChildren {
  SettingsSettingsIdRoute: typeof SettingsSettingsIdRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsSettingsIdRoute: SettingsSettingsIdRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRouteWithChildren,
  SourcesRoute: SourcesRoute,
  StatisticsRoute: StatisticsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
